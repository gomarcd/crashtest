name: Test Winget Submission

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.0.10)'
        required: true
      full_version:
        description: 'Full version (e.g., 2025.0.0.10)'
        required: true

jobs:
  test-winget:
    runs-on: windows-latest
    steps:
      - name: Install WinGet
        run: |
          # Download the Microsoft.DesktopAppInstaller package
          Invoke-WebRequest -Uri https://github.com/microsoft/winget-cli/releases/download/v1.6.3133/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle -OutFile .\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
          
          # Install the package
          Add-AppxPackage -Path .\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
          
          # Verify installation
          winget --version
      
      - name: Install WinGetCreate
        run: |
          # Download WinGetCreate
          Invoke-WebRequest -Uri https://github.com/microsoft/winget-create/releases/download/v1.5.1.0/wingetcreate.exe -OutFile wingetcreate.exe
          
          # Move to a path location
          mkdir -p tools
          Move-Item wingetcreate.exe tools/
          
          # Add to path
          echo "$env:GITHUB_WORKSPACE\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # Verify installation
          wingetcreate --version
      
      - name: Generate Winget Manifest
        run: |
          # Get the installer URL based on provided inputs
          $installerUrl = "https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.tag }}/${{ secrets.APP_NAME }}_${{ github.event.inputs.full_version }}_amd64-installer.exe"
          
          Write-Host "Using installer URL: $installerUrl"
          
          # Use wingetcreate to generate manifest
          wingetcreate new --urls $installerUrl --version ${{ github.event.inputs.full_version }} --out manifests
          
          # Show generated files
          Write-Host "Generated manifest files:"
          Get-ChildItem -Path manifests -Recurse
          
          # Display content of the manifest (if it exists)
          $manifestFiles = Get-ChildItem -Path manifests -Recurse -Filter "*.yaml"
          if ($manifestFiles.Count -gt 0) {
            Write-Host "Manifest content:"
            Get-Content $manifestFiles[0].FullName
          } else {
            Write-Host "No manifest files found. Something went wrong."
            exit 1
          }
      
      - name: Package for submission
        run: |
          # Create submission package with correct directory structure
          $manifestFiles = Get-ChildItem -Path manifests -Recurse -Filter "*.yaml" 
          if ($manifestFiles.Count -gt 0) {
            mkdir -p winget-submission
            xcopy /E /I manifests winget-submission\
          } else {
            Write-Host "No manifest files to package."
            exit 1
          }
      
      - name: Upload Manifest
        uses: actions/upload-artifact@v4
        with:
          name: winget-submission
          path: winget-submission
          retention-days: 7