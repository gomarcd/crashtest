name: Release Crashtest
on:
  push:
    tags:
      - 'v*'
permissions:
  contents: write
jobs:
  determine-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.check-tag.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine platforms to build
        id: check-tag
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # Standard version tag builds all platforms
          if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "platforms=windows,darwin,linux" >> $GITHUB_OUTPUT
          # Platform-specific tags
          elif [[ "$TAG_NAME" =~ -win$ ]]; then
            echo "platforms=windows" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" =~ -mac$ ]]; then
            echo "platforms=darwin" >> $GITHUB_OUTPUT
          elif [[ "$TAG_NAME" =~ -linux$ ]]; then
            echo "platforms=linux" >> $GITHUB_OUTPUT
          else
            # Default to all platforms for other tag formats
            echo "platforms=windows,darwin,linux" >> $GITHUB_OUTPUT
          fi

  build:
    needs: determine-platforms
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: Crashtest_linux_amd64
            output_file: Crashtest_linux_amd64
            build_args: '-tags webkit2_41'
          - os: macos-latest
            platform: darwin
            artifact_name: Crashtest_darwin_universal.zip
            build_args: '-platform darwin/universal'
          - os: windows-latest
            platform: windows
            artifact_name: Crashtest_windows_amd64.exe
            output_file: Crashtest_windows_amd64.exe
            build_args: ''
    runs-on: ${{ matrix.os }}
    if: contains(needs.determine-platforms.outputs.platforms, matrix.platform)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.x'
          check-latest: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install
          cd ..

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Create artifacts directory
        run: mkdir -p build/artifacts

      - name: Build Application Linux
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          wails build -trimpath ${{ matrix.build_args }} -o ${{ matrix.output_file }}
          cp build/bin/${{ matrix.output_file }} build/artifacts/${{ matrix.artifact_name }}

      - name: Build Application Darwin
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          wails build -trimpath ${{ matrix.build_args }}
          if [ -d build/bin/Crashtest.app ]; then
            cd build/bin
            zip -r ${{ matrix.artifact_name }} Crashtest.app
            cd ../..
            cp build/bin/${{ matrix.artifact_name }} build/artifacts/${{ matrix.artifact_name }}
          else
            echo "Build output not found for Darwin"
            exit 1
          fi

      - name: Build Application Windows
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          wails build -trimpath ${{ matrix.build_args }} -o ${{ matrix.output_file }}
          Copy-Item -Path build/bin/${{ matrix.output_file }} -Destination build/artifacts/${{ matrix.artifact_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: build/artifacts/${{ matrix.artifact_name }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare artifacts for release
        run: |
          mkdir -p ./release
          find ./artifacts -type f -exec cp {} ./release/ \;
          ls -l ./release

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}