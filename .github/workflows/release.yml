name: Release

on:
  push:
    tags: [ v* ]

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'darwin/universal'
            os: 'macos-latest'
            artifact-suffix: 'mac'
          - platform: 'linux/amd64'
            os: 'ubuntu-latest'
            artifact-suffix: 'linux'
          - platform: 'windows/amd64'
            os: 'windows-latest'
            artifact-suffix: 'windows'

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Copy gon config into expected path
        if: runner.os == 'macOS'
        run: |
          mkdir -p build/darwin
          cp gon-sign.json build/darwin/gon-sign.json
          cp gon-notarize.json build/darwin/gon-notarize.json

      - name: Wails Build
        uses: dAppServer/wails-build-action@1ed9cb68d194cf664ce7603fdfa353f287fa981f
        with:
          build-name: Crashtest
          build-platform: ${{ matrix.platform }}
          package: false
          nsis: ${{ matrix.os == 'windows-latest' }}
          sign: ${{ secrets.APPLE_CERTIFICATE != '' || secrets.WINDOWS_CERTIFICATE_DATA != '' }}
          wails-version: 2.10.1
          go-version: 1.23
          wails-dev-build: 'false'
          sign-macos-app-id: com.example.crashtest
          sign-macos-app-cert: ${{ secrets.APPLE_CERTIFICATE }}
          sign-macos-app-cert-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          sign-macos-apple-password: ${{ secrets.APPLE_PASSWORD }}
          sign-windows-cert: ${{ secrets.WINDOWS_CERTIFICATE_DATA }}
          sign-windows-cert-password: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: Prepare release artifacts
        run: |
          mkdir -p release
          if [[ "${{ matrix.platform }}" == "darwin/universal" ]]; then
            cp build/bin/Crashtest.app.zip release/Crashtest_${{ env.VERSION }}_universal.zip
            if [ -f build/bin/Crashtest.dmg ]; then
              cp build/bin/Crashtest.dmg release/Crashtest_${{ env.VERSION }}_universal.dmg
            fi
          elif [[ "${{ matrix.platform }}" == "linux/amd64" ]]; then
            cp build/bin/Crashtest release/Crashtest_${{ env.VERSION }}_amd64
          elif [[ "${{ matrix.platform }}" == "windows/amd64" ]]; then
            cp build/bin/Crashtest.exe release/Crashtest_${{ env.VERSION }}_amd64.exe
            if ls build/bin/*-amd64-installer.exe 1> /dev/null 2>&1; then
              cp build/bin/*-amd64-installer.exe release/Crashtest_${{ env.VERSION }}_amd64_installer.exe
            fi
          fi
          cd release
          shasum -a 256 * > SHA256SUMS.txt
          ls -la

      - name: Import GPG key
        run: echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: GPG sign each artifact
        run: |
          for file in release/*; do
            gpg --batch --yes --detach-sign --output "$file.sig" "$file"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Crashtest ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: release/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}