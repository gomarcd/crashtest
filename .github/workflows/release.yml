name: Release

on:
  push:
    tags: [ v* ]

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'linux/amd64'
            os: 'ubuntu-latest'
            artifact_suffix: 'linux'

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read

    outputs:
      release_version: ${{ steps.setup_vars.outputs.release_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup version variables
        id: setup_vars
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          YEAR=$(date +%Y)
          RELEASE_VERSION="${YEAR}.${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "RELEASE_YEAR=${YEAR}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "Tag version: ${VERSION}"
          echo "Release year: ${YEAR}"
          echo "Full release version: ${RELEASE_VERSION}"

      - name: Copy app icon
        shell: bash
        run: |
          mkdir -p build
          cp ./appicon.png build/appicon.png

      - name: Wails Build
        uses: gomarcd/wails-build-action@d926ec814f69d88d69f5bf79487a74df7549d548
        with:
          go-version: "1.23"
          wails-version: "v2.9.0"
          build-name: ${{ secrets.APP_NAME }}
          build-platform: ${{ matrix.platform }}
          package: false  # Donâ€™t package yet, let AppImageBuilder handle it
          build-tags: "webkit2_41"  # Required for Ubuntu 24.04

      - name: Install dependencies for packaging (Linux only)
        if: matrix.platform == 'linux/amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev gcc make file desktop-file-utils
          sudo gem install --no-document fpm

      - name: Prepare AppImage recipe (Linux only)
        if: matrix.platform == 'linux/amd64'
        shell: bash
        run: |
          mkdir -p build
          cp ./AppImageBuilder.yml build/AppImageBuilder.yml
          envsubst < build/AppImageBuilder.yml > build/AppImageBuilder-temp.yml && mv build/AppImageBuilder-temp.yml build/AppImageBuilder.yml
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Build AppImage (Linux only)
        if: matrix.platform == 'linux/amd64'
        uses: AppImageCrafters/build-appimage@master
        with:
          recipe: ./build/AppImageBuilder.yml
          args: '--skip-test'
        env:
          UPDATE_INFO: gh-releases-zsync|${{ github.repository_owner }}|${{ secrets.APP_NAME }}|latest|*x86_64.AppImage.zsync

      - name: Package Linux .deb and move AppImage (Linux only)
        if: matrix.platform == 'linux/amd64'
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
        run: |
          ls -l *.AppImage || echo "No AppImage found; check build step logs."
          fpm -s dir -t deb -n "${APP_NAME}" -v "${RELEASE_VERSION}" --prefix /usr/local/bin build/bin/"${APP_NAME}"
          mv *"${RELEASE_VERSION}_amd64.deb" build/bin/
          mv *.AppImage build/bin/

      - name: Verify environment variables
        shell: bash
        run: |
          echo "VERSION: $VERSION"
          echo "RELEASE_YEAR: $RELEASE_YEAR"
          echo "RELEASE_VERSION: $RELEASE_VERSION"

      - name: Archive build outputs
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.artifact_suffix }}
          path: build/bin/
          if-no-files-found: error