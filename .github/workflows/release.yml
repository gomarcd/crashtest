name: Release

on:
  push:
    tags: [ v* ]

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'darwin/universal'
            os: 'macos-latest'
            artifact-suffix: 'mac'
          - platform: 'linux/amd64'
            os: 'ubuntu-latest'
            artifact-suffix: 'linux'
          - platform: 'windows/amd64'
            os: 'windows-latest'
            artifact-suffix: 'windows'

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup version variables
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          YEAR=$(date +%Y)
          RELEASE_VERSION="${YEAR}.${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "RELEASE_YEAR=${YEAR}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Prepare gon configuration
        if: runner.os == 'macOS'
        shell: bash
        run: |
          mkdir -p build/darwin
          cp gon-sign.json build/darwin/gon-sign.json
          cp gon-notarize.json build/darwin/gon-notarize.json
          envsubst < build/darwin/gon-sign.json > build/darwin/gon-sign-temp.json && mv build/darwin/gon-sign-temp.json build/darwin/gon-sign.json
          envsubst < build/darwin/gon-notarize.json > build/darwin/gon-notarize-temp.json && mv build/darwin/gon-notarize-temp.json build/darwin/gon-notarize.json
        env:
          APPLE_ID_USER: ${{ secrets.APPLE_ID_USER }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_DEVELOPER_ID_CERT: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          APP_NAME: ${{ secrets.APP_NAME }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Copy app icon
        shell: bash
        run: |
          mkdir -p build
          cp ./appicon.png build/appicon.png

      - name: Wails Build
        uses: gomarcd/wails-build-action@main
        with:
          go-version: "1.23"
          wails-version: "v2.9.0"
          build-name: ${{ secrets.APP_NAME }}
          build-platform: ${{ matrix.platform }}
          package: false
          nsis: ${{ matrix.os == 'windows-latest' }}
          sign: ${{ (matrix.platform == 'darwin/universal' && secrets.APPLE_CERTIFICATE != '') || (matrix.platform == 'windows/amd64' && secrets.WINDOWS_CERTIFICATE_DATA != '') }}
          sign-macos-app-id: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          sign-macos-app-cert: ${{ secrets.APPLE_CERTIFICATE }}
          sign-macos-app-cert-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          sign-macos-installer-cert: ${{ secrets.APPLE_CERTIFICATE }}
          sign-macos-installer-cert-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          sign-macos-apple-password: ${{ secrets.APPLE_ID_PASS }}
          sign-windows-cert: ${{ secrets.WINDOWS_CERTIFICATE_DATA }}
          sign-windows-cert-password: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: Verify environment variables
        shell: bash
        run: |
          echo "VERSION: $VERSION"
          echo "RELEASE_YEAR: $RELEASE_YEAR"
          echo "RELEASE_VERSION: $RELEASE_VERSION"

      - name: Create release directory
        shell: bash
        run: mkdir -p release

      - name: Copy built artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $releaseVersion = "${{ env.RELEASE_VERSION }}"
          Write-Output "Using release version: $releaseVersion"
          $exePath = "release/${{ secrets.APP_NAME }}_${releaseVersion}_amd64.exe"
          $installerPath = "release/${{ secrets.APP_NAME }}_${releaseVersion}_amd64_installer.exe"
          Write-Output "Creating artifacts at paths:"
          Write-Output "  $exePath"
          Write-Output "  $installerPath"
          Copy-Item "build/bin/${{ secrets.APP_NAME }}" $exePath -ErrorAction Stop
          Copy-Item "build/bin/${{ secrets.APP_NAME }}-amd64-installer.exe" $installerPath -ErrorAction Stop
          Get-ChildItem release

      - name: Copy built artifacts (Mac/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Using release version: $RELEASE_VERSION"
          if [[ "${{ matrix.platform }}" == "darwin/universal" ]]; then
            zipName="${{ secrets.APP_NAME }}_${RELEASE_VERSION}_universal.zip"
            zipPath="release/$zipName"
            echo "Creating Mac ZIP artifact: $zipPath"
            cp build/bin/${{ secrets.APP_NAME }}.app.zip $zipPath
            if [ -f build/bin/${{ secrets.APP_NAME }}.dmg ]; then
              dmgName="${{ secrets.APP_NAME }}_${RELEASE_VERSION}_universal.dmg"
              dmgPath="release/$dmgName"
              echo "Creating Mac DMG artifact: $dmgPath"
              cp build/bin/${{ secrets.APP_NAME }}.dmg $dmgPath
            fi
          elif [[ "${{ matrix.platform }}" == "linux/amd64" ]]; then
            binName="${{ secrets.APP_NAME }}_${RELEASE_VERSION}_amd64"
            binPath="release/$binName"
            echo "Creating Linux binary artifact: $binPath"
            cp build/bin/${{ secrets.APP_NAME }} $binPath
          fi

          ls -la release/

      - name: Generate Checksums
        shell: bash
        run: |
          cd release
          for file in *; do
            if [[ -f "$file" && ! "$file" == *.sig && ! "$file" == *.sha256 ]]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          cd ..

      - name: Import GPG key (with check)
        shell: bash
        run: |
          if [ -z "$GPG_PRIVATE_KEY" ]; then
            echo "GPG_PRIVATE_KEY is not set or is empty"
            exit 1
          else
            key_length=${#GPG_PRIVATE_KEY}
            echo "GPG_PRIVATE_KEY is set (length: $key_length). Attempting import..."
          fi

          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          gpg_exit_code=$?
          if [[ $gpg_exit_code -ne 0 ]]; then
            echo "GPG key import failed with exit code $gpg_exit_code"
            exit $gpg_exit_code
          fi
          echo "GPG key import successful."
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: GPG sign each artifact
        shell: bash
        run: |
          for file in release/*; do
            if [[ ! "$file" == *.sig && ! "$file" == *.sha256 ]]; then
              echo "Signing file: $file"
              gpg --batch --yes --detach-sign --output "$file.sig" "$file"
            fi
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ secrets.APP_NAME }} Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: release/**
          generate_release_notes: false
          body: |
            [Changelog ${{ env.RELEASE_VERSION }}](https://github.com/gomarcd/crashtest/commits/${{ github.ref_name }})

            For verification instructions, see [Security Documentation](https://github.com/gomarcd/crashtest/blob/main/README.md#security).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}