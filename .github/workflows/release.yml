name: Release Crashtest

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: Crashtest_linux_amd64
            output_path: build/bin/Crashtest_linux_amd64
            build_args: '-tags webkit2_41'
          - os: macos-latest
            platform: darwin
            artifact_name: Crashtest_darwin_universal.zip
            output_path: build/bin/Crashtest_darwin_universal.zip
            build_args: '-platform darwin/universal'
          - os: windows-latest
            platform: windows
            artifact_name: Crashtest_windows_amd64.exe
            output_path: build/bin/Crashtest_windows_amd64.exe
            build_args: ''

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.x'
          check-latest: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install
          cd ..

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build Application
        shell: bash
        run: |
          mkdir -p build/bin
          BUILD_CMD="wails build -trimpath ${{ matrix.build_args }}"
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            $BUILD_CMD -o "${{ matrix.output_path }}"
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
             pwsh -Command "$BUILD_CMD -o '${{ matrix.output_path }}'"
          elif [[ "${{ matrix.platform }}" == "darwin" ]]; then
            $BUILD_CMD
            APP_BUNDLE_PATH="build/bin/Crashtest.app"
            TARGET_ZIP_PATH="${{ matrix.output_path }}"
            if [ -d "$APP_BUNDLE_PATH" ]; then
              cd build/bin
              zip -r "${{ matrix.artifact_name }}" Crashtest.app
              cd ../..
            else
              exit 1
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.output_path }}
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare artifacts for release
        run: |
          mkdir -p ./release
          cp ./artifacts/Crashtest_linux_amd64/Crashtest_linux_amd64 ./release/
          cp ./artifacts/Crashtest_windows_amd64.exe/Crashtest_windows_amd64.exe ./release/
          cp ./artifacts/Crashtest_darwin_universal.zip/Crashtest_darwin_universal.zip ./release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}