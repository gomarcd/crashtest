name: Release

on:
  push:
    tags: [ v* ]

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'darwin/universal'
            os: 'macos-latest'
            artifact-suffix: 'mac'
          - platform: 'linux/amd64'
            os: 'ubuntu-latest'
            artifact-suffix: 'linux'
          - platform: 'windows/amd64'
            os: 'windows-latest'
            artifact-suffix: 'windows'

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Prepare gon configuration
        if: runner.os == 'macOS'
        shell: bash
        run: |
          mkdir -p build/darwin
          cp gon-sign.json build/darwin/gon-sign.json
          cp gon-notarize.json build/darwin/gon-notarize.json
          envsubst < build/darwin/gon-sign.json > build/darwin/gon-sign-temp.json && mv build/darwin/gon-sign-temp.json build/darwin/gon-sign.json
          envsubst < build/darwin/gon-notarize.json > build/darwin/gon-notarize-temp.json && mv build/darwin/gon-notarize-temp.json build/darwin/gon-notarize.json
        env:
          APPLE_ID_USER: ${{ secrets.APPLE_ID_USER }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_DEVELOPER_ID_CERT: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          APP_NAME: ${{ secrets.APP_NAME }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}          

      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Copy app icon
        shell: bash
        run: |
          mkdir -p build
          cp ./appicon.png build/appicon.png

      - name: Wails Build
        uses: gomarcd/wails-build-action@main
        with:
          go-version: "1.23"
          wails-version: "v2.9.0"
          build-name: ${{ secrets.APP_NAME }}
          build-platform: ${{ matrix.platform }}
          package: false
          nsis: ${{ matrix.os == 'windows-latest' }}
          sign: ${{ (matrix.platform == 'darwin/universal' && secrets.APPLE_CERTIFICATE != '') || (matrix.platform == 'windows/amd64' && secrets.WINDOWS_CERTIFICATE_DATA != '') }}
          sign-macos-app-id: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          sign-macos-app-cert: ${{ secrets.APPLE_CERTIFICATE }}
          sign-macos-app-cert-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          sign-macos-installer-cert: ${{ secrets.APPLE_CERTIFICATE }}
          sign-macos-installer-cert-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          sign-macos-apple-password: ${{ secrets.APPLE_ID_PASS }}
          sign-windows-cert: ${{ secrets.WINDOWS_CERTIFICATE_DATA }}
          sign-windows-cert-password: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: Prepare release artifacts
        shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}
        run: |
          ${{ runner.os == 'Windows' && 'mkdir -Force release' || 'mkdir -p release' }}
          
          ${{ runner.os == 'Windows' && 
          'Copy-Item "build/bin/${{ secrets.APP_NAME }}.exe" "release/${{ secrets.APP_NAME }}_${{ env.VERSION }}_amd64.exe"
          Get-ChildItem "build/bin/*-amd64-installer.exe" -ErrorAction SilentlyContinue | ForEach-Object { Copy-Item $_.FullName "release/${{ secrets.APP_NAME }}_${{ env.VERSION }}_amd64_installer.exe" }' 
          ||
          'if [[ "${{ matrix.platform }}" == "darwin/universal" ]]; then
            cp build/bin/${{ secrets.APP_NAME }}.app.zip release/${{ secrets.APP_NAME }}${{ env.VERSION }}_universal.zip
            [ -f build/bin/${{ secrets.APP_NAME }}.dmg ] && cp build/bin/${{ secrets.APP_NAME }}.dmg release/${{ secrets.APP_NAME }}_${{ env.VERSION }}_universal.dmg
          elif [[ "${{ matrix.platform }}" == "linux/amd64" ]]; then
            cp build/bin/${{ secrets.APP_NAME }} release/${{ secrets.APP_NAME }}_${{ env.VERSION }}_amd64
          fi' }}
          
          ${{ runner.os == 'Windows' && 
          'Set-Location release
          Get-FileHash -Algorithm SHA256 * | ForEach-Object { "$($_.Hash)  $($_.Path.Split("/")[-1])" } | Out-File -FilePath SHA256SUMS.txt -Encoding utf8' 
          || 
          'cd release
          shasum -a 256 * > SHA256SUMS.txt' }}

      - name: Import GPG key
        run: echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: GPG sign each artifact
        run: |
          for file in release/*; do
            gpg --batch --yes --detach-sign --output "$file.sig" "$file"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ secrets.APP_NAME }} ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: release/**
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}